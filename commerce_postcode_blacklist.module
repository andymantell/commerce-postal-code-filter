<?php

/**
 * @file
 * Main module file for Commerce postcode blacklist
 */

/**
 * Implements hook_menu().
 */
function commerce_postcode_blacklist_menu() {

  $items = array();

  $items['admin/commerce/config/postcode-blacklist'] = array(
    'title' => 'Postcode blacklist',
    'description' => 'Administer the postcode blacklist.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_postcode_blacklist_configure'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('configure postcode blacklist'),
    'file' => 'commerce_postcode_blacklist.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function commerce_postcode_blacklist_permission() {
  return array(
    'configure postcode blacklist' => array(
      'title' => t('Configure postcode blacklist'),
      'description' => t('Edit the list of postcodes on the blacklist.'),
    ),
  );
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Add a validation routine onto the billing pane
 */
function commerce_postcode_blacklist_commerce_checkout_pane_info_alter(&$checkout_panes) {

  $checkout_panes['customer_profile_billing']['callbacks']['checkout_form_validate'] = '_commerce_postcode_blacklist_validate_postcode';

}

/**
 * Validation callback for the billing pane on the checkout form
 */
function _commerce_postcode_blacklist_validate_postcode(&$form, &$form_state, $checkout_pane) {

  $langcode = $form['customer_profile_billing']['commerce_customer_address']['#language'];

  // Fetch our array of blacklisted postcodes.
  $blacklist = variable_get('commerce_postcode_blacklist', '');

  /**
   * If the blacklist doesn't containing any postcodes, then return TRUE,
   * the postcode must be valid.
   */
  if (empty($blacklist)) {
    return TRUE;
  }

  // Explode the list of postcodes into an array.
  $blacklist = explode(',', $blacklist);

  // Grab the postcode from the form state.
  $postcode = $form_state['values']['customer_profile_billing']['commerce_customer_address'][$langcode][0]['postal_code'];

  // Convert it to uppercase.
  $postcode = strtoupper($postcode);

  // And strip any whitespace from it.
  $postcode = preg_replace('/\s+/', '', $postcode);

  // Check the postcode against each postcode in our blacklist.
  // We are checking for partial matches, i.e. if the submitted postcode *begins with* the blacklisted item.
  foreach ($blacklist as $blacklisted_item) {
    if (strpos($postcode, $blacklisted_item) !== FALSE) {
      form_set_error(
        sprintf(
          'customer_profile_billing][commerce_customer_address][%s][0][postal_code',
          $langcode
        ),
        variable_get('commerce_postcode_blacklist_message', t('We do not deliver to this postcode'))
      );
      return FALSE;
    }
  }

  // If we've made it this far, the postcode must be valid.
  return TRUE;

}
