<?php

/**
 * @file
 * Main module file for Commerce postcode blacklist
 */

/**
 * Main validation function. Used by checkout validation process but is
 * abstracted enough that it could be used elsewhere if necessary.
 *
 * @param string $postcode
 *  Postcode to validate.
 *
 * @return bool
 *  Whether the postcode is valid or not.
 */
function _commerce_postcode_blacklist_postcode_is_valid($postcode) {

  // Convert the postcode to uppercase.
  $postcode = strtoupper($postcode);

  // And strip any whitespace from it.
  $postcode = preg_replace('/\s+/', '', $postcode);

  // Collect up postcodes from all modules exposing them.
  $blacklist = array();
  foreach (module_implements('commerce_postcode_blacklist_postcodes') as $module) {
    $results = module_invoke($module, 'commerce_postcode_blacklist_postcodes');
    $blacklist = array_unique(array_merge($blacklist, $results));
  }

  // If the blacklist doesn't containing any postcodes, then return TRUE,
  // the postcode must be valid.
  if (empty($blacklist)) {
    return TRUE;
  }

  // Check the postcode against each postcode in our blacklist.
  // We are checking for partial matches, i.e. if the submitted postcode
  // *begins with* the blacklisted item.
  foreach ($blacklist as $blacklisted_item) {
    if (strpos($postcode, $blacklisted_item) !== FALSE) {
      return FALSE;
    }
  }

  // If we've made it this far, the postcode must be valid.
  return TRUE;

}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Add a validation routine onto the billing pane
 */
function commerce_postcode_blacklist_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['customer_profile_billing']['callbacks']['checkout_form_validate'] = '_commerce_postcode_blacklist_validate_checkout_pane';
}

/**
 * Form validation callback for the billing pane on the checkout form
 */
function _commerce_postcode_blacklist_validate_checkout_pane(&$form, &$form_state, $checkout_pane) {

  $langcode = $form['customer_profile_billing']['commerce_customer_address']['#language'];

  // Grab the postcode from the form state.
  $postcode = $form_state['values']['customer_profile_billing']['commerce_customer_address'][$langcode][0]['postal_code'];

  if (_commerce_postcode_blacklist_postcode_is_valid($postcode)) {
    return TRUE;
  }
  else {

    form_set_error(
      sprintf(
        'customer_profile_billing][commerce_customer_address][%s][0][postal_code',
        $langcode
      ),
      variable_get('commerce_postcode_blacklist_message', t('We do not deliver to this postcode'))
    );

    return FALSE;

  }

}
