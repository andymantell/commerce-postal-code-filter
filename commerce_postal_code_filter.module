<?php

/**
 * @file
 * Main module file for Commerce postal code filter
 */

/**
 * Main validation function. Used by checkout validation process but is
 * abstracted enough that it could be used elsewhere if necessary.
 * This function will either whitelist or blacklist postcodes based on the value
 * of "commerce_postal_code_filter_mode" variable ('whitelist' or 'blacklist')
 *
 * @param string $postal_code
 *   Postal code to validate.
 *
 * @return bool
 *   Whether the postal code is valid or not.
 */
function _commerce_postal_code_filter_postal_code_is_valid($postal_code) {

  // Convert the postal code to uppercase.
  $postal_code = strtoupper($postal_code);

  // And strip any whitespace from it.
  $postal_code = preg_replace('/\s+/', '', $postal_code);

  // Collect up postal codes from all modules exposing them.
  $postal_codes = array();
  foreach (module_implements('commerce_postal_code_filter_postal_codes') as $module) {
    $results = module_invoke($module, 'commerce_postal_code_filter_postal_codes');
    $postal_codes = array_unique(array_merge($postal_codes, $results));
  }

  // Regardless of the blacklist / whitelist mode, if the filter list doesn't
  // contain any postal codes, then return TRUE, the postal code must be valid.
  if (empty($postal_codes)) {
    return TRUE;
  }

  $mode = variable_get('commerce_postal_code_filter_mode', 'blacklist');

  // Check the postal code against each postal code in our filter list.
  // We are checking for partial matches, i.e. if the submitted postal code
  // *begins with* the filtered item.
  foreach ($postal_codes as $filtered_item) {
    if (strpos($postal_code, $filtered_item) !== FALSE) {

      // We've found a match, if we're blacklisting, return FALSE.
      // If we're whitelisting, return TRUE.
      return ($mode == 'blacklist') ? FALSE : TRUE;

    }
  }

  // No matches found.
  // If we're blacklisting, return TRUE as the postcode was not blacklisted.
  // If we're whitelisting, return FALSE as the postcode was not whitelisted.
  return ($mode == 'blacklist') ? TRUE : FALSE;

}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Add a validation routine onto the shipping pane
 */
function commerce_postal_code_filter_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['customer_profile_shipping']['callbacks']['checkout_form_validate'] = '_commerce_postal_code_filter_validate_checkout_pane';
}

/**
 * Form validation callback for the shipping pane on the checkout form
 */
function _commerce_postal_code_filter_validate_checkout_pane(&$form, &$form_state, $checkout_pane) {

  $langcode = $form['customer_profile_shipping']['commerce_customer_address']['#language'];

  // Grab the postal code from the form state.
  $postal_code = $form_state['values']['customer_profile_shipping']['commerce_customer_address'][$langcode][0]['postal_code'];

  if (_commerce_postal_code_filter_postal_code_is_valid($postal_code)) {
    return TRUE;
  }
  else {

    form_set_error(
      sprintf(
        'customer_profile_shipping][commerce_customer_address][%s][0][postal_code',
        $langcode
      ),
      variable_get('commerce_postal_code_filter_message', t('We do not deliver to this postal code'))
    );

    return FALSE;

  }

}

/**
 * Implements hook_block_info().
 */
function commerce_postal_code_filter_block_info() {

  $blocks = array();

  $blocks['delivery-check'] = array(
    'info' => t('Commerce Postal Code Filter - Delivery check'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;

}

/**
 * Implements hook_block_view().
 */
function commerce_postal_code_filter_block_view($delta = '') {

  switch ($delta) {

    case 'delivery-check':
      return array(
        'subject' => t('Do we deliver to your area?'),
        'content' => array(
          'description' => array(
            '#prefix' => '<p>',
            '#markup' => t('Enter your postal code below and check to see if we deliver to your area.'),
            '#suffix' => '</p>',
          ),
          'delivery-check-form' => drupal_get_form('commerce_postal_code_filter_delivery_check'),
        ),
      );

      break;
  }

}

/**
 * Implements hook_block_configure().
 */
function commerce_postal_code_filter_block_configure($delta = '') {

  switch ($delta) {

    case 'delivery-check':
      $form = array();

      $form['commerce_postal_code_filter_block_error_message'] = array(
        '#type' => 'textfield',
        '#title' => t('Error message'),
        '#required' => TRUE,
        '#description' => t('Error message to display when a customer checks a postcode that is not acceptable'),
        '#default_value' => variable_get('commerce_postal_code_filter_block_error_message', 'Sorry, We do not deliver to this postal code.'),
      );

      $form['commerce_postal_code_filter_block_success_message'] = array(
        '#type' => 'textfield',
        '#title' => t('Success message'),
        '#required' => TRUE,
        '#description' => t('Message to display when a customer checks a postcode that is acceptable'),
        '#default_value' => variable_get('commerce_postal_code_filter_block_success_message', 'Good news! We can deliver to this postal code.'),
      );

      return $form;

      break;

  }

}

/**
 * Implements hook_block_save().
 */
function commerce_postal_code_filter_block_save($delta = '', $edit = array()) {

  switch ($delta) {

    case 'delivery-check':
      variable_set('commerce_postal_code_filter_block_success_message', $edit['commerce_postal_code_filter_block_success_message']);
      variable_set('commerce_postal_code_filter_block_error_message', $edit['commerce_postal_code_filter_block_error_message']);

      break;

  }

}

/**
 * Form callback for delivery check block
 */
function commerce_postal_code_filter_delivery_check($form, &$form_state) {

  $form['postal_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Postal code'),
    '#size' => 15,
  );

  $form['postal_code_validity'] = array(
    '#prefix' => '<div id="postal-code-validity">',
    '#suffix' => '</div>',
  );

  if (!empty($form_state['values']['postal_code'])) {

    if (_commerce_postal_code_filter_postal_code_is_valid($form_state['values']['postal_code'])) {
      $form['postal_code_validity']['#markup'] = '<p class="commerce-postcode-filter-valid">' . variable_get('commerce_postal_code_filter_block_success_message', 'Good news! We can deliver to this postal code.') . '</p>';
    }
    else {
      $form['postal_code_validity']['#markup'] = '<p class="commerce-postcode-filter-invalid">' . variable_get('commerce_postal_code_filter_block_error_message', 'Sorry, We do not deliver to this postal code.') . '</p>';
    }
  }

  $form['check'] = array(
    '#type' => 'button',
    '#value' => t('Check postal code'),
    '#ajax' => array(
      'callback' => 'commerce_postal_code_filter_delivery_check_ajax_callback',
      'wrapper' => 'postal-code-validity',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_postal_code_filter') . '/commerce_postal_code_filter.css';

  return $form;

}

/**
 * Ajax callback for delivery check form
 */
function commerce_postal_code_filter_delivery_check_ajax_callback($form, $form_state) {

  return $form['postal_code_validity'];

}
