<?php

/**
 * @file
 * Main module file for Commerce postal code filter
 */

require_once('commerce_postal_code_filter.blocks.inc');
require_once('commerce_postal_code_filter.forms.inc');

/**
 * Main validation function. Used by checkout validation process but is
 * abstracted enough that it could be used elsewhere if necessary.
 * This function will either whitelist or blacklist postcodes based on the value
 * of "commerce_postal_code_filter_mode" variable ('whitelist' or 'blacklist')
 *
 * @param string $postal_code
 *   Postal code to validate.
 *
 * @return bool
 *   Whether the postal code is valid or not.
 */
function _commerce_postal_code_filter_postal_code_is_valid($postal_code) {

  // Convert the postal code to uppercase.
  $postal_code = strtoupper($postal_code);

  // And strip any whitespace from it.
  $postal_code = preg_replace('/\s+/', '', $postal_code);

  // Collect up postal codes from all modules exposing them.
  $postal_codes = array();
  foreach (module_implements('commerce_postal_code_filter_postal_codes') as $module) {
    $results = module_invoke($module, 'commerce_postal_code_filter_postal_codes');
    $postal_codes = array_unique(array_merge($postal_codes, $results));
  }

  // Regardless of the blacklist / whitelist mode, if the filter list doesn't
  // contain any postal codes, then return TRUE, the postal code must be valid.
  if (empty($postal_codes)) {
    return TRUE;
  }

  $mode = variable_get('commerce_postal_code_filter_mode', 'blacklist');

  // Check the postal code against each postal code in our filter list.
  // We are checking for partial matches, i.e. if the submitted postal code
  // *begins with* the filtered item.
  foreach ($postal_codes as $filtered_item) {
    if (strpos($postal_code, $filtered_item) !== FALSE) {

      // We've found a match, if we're blacklisting, return FALSE.
      // If we're whitelisting, return TRUE.
      return ($mode == 'blacklist') ? FALSE : TRUE;

    }
  }

  // No matches found.
  // If we're blacklisting, return TRUE as the postcode was not blacklisted.
  // If we're whitelisting, return FALSE as the postcode was not whitelisted.
  return ($mode == 'blacklist') ? TRUE : FALSE;

}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Add a validation routine onto the billing pane
 */
function commerce_postal_code_filter_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['customer_profile_billing']['callbacks']['checkout_form_validate'] = '_commerce_postal_code_filter_validate_checkout_pane';
}

/**
 * Form validation callback for the billing pane on the checkout form
 */
function _commerce_postal_code_filter_validate_checkout_pane(&$form, &$form_state, $checkout_pane) {

  $langcode = $form['customer_profile_billing']['commerce_customer_address']['#language'];

  // Grab the postal code from the form state.
  $postal_code = $form_state['values']['customer_profile_billing']['commerce_customer_address'][$langcode][0]['postal_code'];

  if (_commerce_postal_code_filter_postal_code_is_valid($postal_code)) {
    return TRUE;
  }
  else {

    form_set_error(
      sprintf(
        'customer_profile_billing][commerce_customer_address][%s][0][postal_code',
        $langcode
      ),
      variable_get('commerce_postal_code_filter_message', t('We do not deliver to this postal code'))
    );

    return FALSE;

  }

}
